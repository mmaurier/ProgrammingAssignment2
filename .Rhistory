x <- rbind(c(1, 1/4), c(1/4, 1))
##this function calculates the inverse of the special "matrix"
##created with the cacheSolve function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setsolve <- function(solve) i <<- solve
getsolve <- function() i
list(set = set, get = set,
setsolve = setsolve,
getsolve = getsolve)
}
##this function computes the inverse of the special "matrix" returned by makeCacheMatrix
cacheInverse <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getsolve()
if(!is.null(s)){
message("getting cached data")
return(s)
}
data <- x$get()
m <- solve(data,...)
x$setsolve(m)
}
makeCacheMatrix(x)
x1 <- cacheInverse(makeCacheMatrix(x))
## !!!!!!!!!!!!!!!!!REMOVE MATRIX STATEMENT BELOW BEFORE FINAL COMMIT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
x <- rbind(c(1, 1/4), c(1/4, 1))
##this function calculates the inverse of the special "matrix"
##created with the cacheSolve function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setsolve <- function(solve) i <<- solve
getsolve <- function() i
list(set = set, get = set,
setsolve = setsolve,
getsolve = getsolve)
}
##this function computes the inverse of the special "matrix" returned by makeCacheMatrix
cacheInverse <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getsolve()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setsolve(i)
i
}
x1 <- cacheInverse(makeCacheMatrix(x))
x1 <- cacheInverse(makeCacheMatrix(x),...)
x1 <- cacheInverse(makeCacheMatrix(x))
